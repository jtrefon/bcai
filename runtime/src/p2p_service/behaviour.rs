//! Custom libp2p behaviour combining the protocols used by BCAI.

use libp2p::{
    gossipsub,
    kad,
    request_response,
    swarm::NetworkBehaviour,
};

use crate::p2p_service::codec::{WireCodec, WireMessage};

/// Events generated by the composed behaviour.
#[derive(Debug)]
pub enum BCAIBehaviourEvent {
    Gossipsub(gossipsub::Event),
    Kademlia(kad::Event),
    RequestResponse(request_response::Event<WireMessage, WireMessage>),
}

/// The network behaviour used by nodes in the BCAI network.
///
/// It composes three sub behaviours:
/// 1. Gossipsub for pub-sub messaging
/// 2. Kademlia DHT for peer discovery
/// 3. Request/Response for direct RPC style messaging
#[derive(NetworkBehaviour)]
#[behaviour(out_event = "BCAIBehaviourEvent")]
pub struct BCAINetworkBehaviour {
    pub gossipsub: gossipsub::Behaviour,
    pub kademlia: kad::Behaviour,
    pub request_response: request_response::Behaviour<WireCodec>,
}

impl From<gossipsub::Event> for BCAIBehaviourEvent {
    fn from(e: gossipsub::Event) -> Self {
        Self::Gossipsub(e)
    }
}

impl From<kad::Event> for BCAIBehaviourEvent {
    fn from(e: kad::Event) -> Self {
        Self::Kademlia(e)
    }
}

impl From<request_response::Event<WireMessage, WireMessage>> for BCAIBehaviourEvent {
    fn from(e: request_response::Event<WireMessage, WireMessage>) -> Self {
        Self::RequestResponse(e)
    }
} 