version: '3.8'

services:
  #===========================================================================
  # BCAI Node Services (3-node cluster for production redundancy)
  #===========================================================================
  
  bcai-validator-1:
    build: .
    container_name: bcai-validator-1
    hostname: validator-1
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - BCAI_NODE_TYPE=validator
      - BCAI_NODE_ID=validator-1
      - BCAI_LISTEN_PORT=4001
      - BCAI_API_PORT=8080
      - BCAI_METRICS_PORT=9090
      - BCAI_SECURITY_LEVEL=critical
      - BCAI_INITIAL_STAKE=50000
    ports:
      - "4001:4001"  # P2P
      - "8080:8080"  # API
      - "9090:9090"  # Metrics
    volumes:
      - validator1_data:/app/data
      - validator1_logs:/app/logs
      - ./docker/config/validator.toml:/app/config/production.toml:ro
    networks:
      - bcai-network
    healthcheck:
      test: ["CMD", "/app/bin/bcai-node", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  bcai-worker-1:
    build: .
    container_name: bcai-worker-1
    hostname: worker-1
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - BCAI_NODE_TYPE=worker
      - BCAI_NODE_ID=worker-1
      - BCAI_LISTEN_PORT=4002
      - BCAI_API_PORT=8081
      - BCAI_METRICS_PORT=9091
      - BCAI_SECURITY_LEVEL=high
      - BCAI_INITIAL_STAKE=25000
      - BCAI_BOOTSTRAP_NODES=validator-1:4001
    ports:
      - "4002:4002"  # P2P
      - "8081:8081"  # API
      - "9091:9091"  # Metrics
    volumes:
      - worker1_data:/app/data
      - worker1_logs:/app/logs
      - ./docker/config/worker.toml:/app/config/production.toml:ro
    networks:
      - bcai-network
    depends_on:
      - bcai-validator-1
    healthcheck:
      test: ["CMD", "/app/bin/bcai-node", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'

  bcai-worker-2:
    build: .
    container_name: bcai-worker-2
    hostname: worker-2
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - BCAI_NODE_TYPE=worker
      - BCAI_NODE_ID=worker-2
      - BCAI_LISTEN_PORT=4003
      - BCAI_API_PORT=8082
      - BCAI_METRICS_PORT=9092
      - BCAI_SECURITY_LEVEL=high
      - BCAI_INITIAL_STAKE=25000
      - BCAI_BOOTSTRAP_NODES=validator-1:4001,worker-1:4002
    ports:
      - "4003:4003"  # P2P
      - "8082:8082"  # API
      - "9092:9092"  # Metrics
    volumes:
      - worker2_data:/app/data
      - worker2_logs:/app/logs
      - ./docker/config/worker.toml:/app/config/production.toml:ro
    networks:
      - bcai-network
    depends_on:
      - bcai-validator-1
      - bcai-worker-1
    healthcheck:
      test: ["CMD", "/app/bin/bcai-node", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'

  #===========================================================================
  # Load Balancer & API Gateway
  #===========================================================================
  
  nginx-lb:
    image: nginx:1.25-alpine
    container_name: bcai-loadbalancer
    restart: unless-stopped
    ports:
      - "80:80"      # HTTP Load Balancer
      - "443:443"    # HTTPS (when SSL configured)
      - "8000:8000"  # API Gateway
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/api-gateway.conf:/etc/nginx/conf.d/api-gateway.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - bcai-network
    depends_on:
      - bcai-validator-1
      - bcai-worker-1
      - bcai-worker-2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  #===========================================================================
  # Monitoring & Observability Stack
  #===========================================================================
  
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: bcai-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bcai-network
    depends_on:
      - bcai-validator-1
      - bcai-worker-1
      - bcai-worker-2

  grafana:
    image: grafana/grafana:10.2.0
    container_name: bcai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=bcai-admin-2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - bcai-network
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: bcai-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - bcai-network
    depends_on:
      - prometheus

  #===========================================================================
  # Log Management
  #===========================================================================

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: bcai-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - bcai-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: bcai-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - bcai-network
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: bcai-logstash
    restart: unless-stopped
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./docker/logstash/config:/usr/share/logstash/config:ro
      - validator1_logs:/logs/validator1:ro
      - worker1_logs:/logs/worker1:ro
      - worker2_logs:/logs/worker2:ro
    networks:
      - bcai-network
    depends_on:
      - elasticsearch

  #===========================================================================
  # Redis Cache for API responses and coordination
  #===========================================================================

  redis:
    image: redis:7.2-alpine
    container_name: bcai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass bcai-redis-2024
    volumes:
      - redis_data:/data
    networks:
      - bcai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

#===============================================================================
# Networks
#===============================================================================

networks:
  bcai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

#===============================================================================
# Persistent Volumes
#===============================================================================

volumes:
  # Node data
  validator1_data:
    driver: local
  worker1_data:
    driver: local
  worker2_data:
    driver: local
  
  # Node logs
  validator1_logs:
    driver: local
  worker1_logs:
    driver: local
  worker2_logs:
    driver: local
  nginx_logs:
    driver: local
  
  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  
  # Log management
  elasticsearch_data:
    driver: local
  
  # Cache
  redis_data:
    driver: local 